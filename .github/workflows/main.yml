import MetaTrader5 as mt5
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from datetime import datetime
import time

# =============================================
# MT5 Configuration
# =============================================
MT5_SERVER = DerivSVG-Server-03
MT5_LOGIN = 140193658
MT5_PASSWORD = "your_password"
SYMBOLS = ["EURUSD", "USDJPY", "BTCUSD", "XAUUSD", "ETHUSD"]
TIMEFRAME = mt5.TIMEFRAME_H1_15MIN
LOT_SIZE = 0.02
RISK_REWARD_RATIOS = [2, 3]

# Initialize MT5 connection
if not mt5.initialize(login=MT5_LOGIN, server=MT5_SERVER, password=MT5_PASSWORD):
    print("MT5 initialization failed")
    mt5.shutdown()

# =============================================
# Advanced SMC Feature Engineering
# =============================================
def calculate_smc_features(df):
    # Breaker Blocks
    df['breaker_bullish'] = ((df['high'] > df['high'].shift(2)) & 
                            (df['low'] > df['low'].shift(2))).astype(int)
    df['breaker_bearish'] = ((df['low'] < df['low'].shift(2)) & 
                            (df['high'] < df['high'].shift(2))).astype(int)
    
    # Order Blocks
    df['order_block_bull'] = ((df['close'] > df['open']) & 
                             (df['close'] > df['close'].shift(1)) & 
                             (df['volume'] > df['volume'].rolling(5).mean())).astype(int)
    df['order_block_bear'] = ((df['close'] < df['open']) & 
                             (df['close'] < df['close'].shift(1)) & 
                             (df['volume'] > df['volume'].rolling(5).mean())).astype(int)
    
    # Imbalance Zones
    df['imbalance_bull'] = ((df['low'] > df['high'].shift(1)) & 
                           (df['volume'] > df['volume'].rolling(3).mean())).astype(int)
    df['imbalance_bear'] = ((df['high'] < df['low'].shift(1)) & 
                           (df['volume'] > df['volume'].rolling(3).mean())).astype(int)
    
    return df

# =============================================
# LSTM Model Architecture
# =============================================
def create_lstm_model(input_shape):
    model = Sequential()
    model.add(LSTM(64, return_sequences=True, input_shape=input_shape))
    model.add(Dropout(0.3))
    model.add(LSTM(32))
    model.add(Dropout(0.3))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(optimizer='adam', loss='binary_crossentropy')
    return model

# =============================================
# Data Processing Pipeline
# =============================================
def prepare_data(symbol, lookback=60):
    bars = mt5.copy_rates_from_pos(symbol, TIMEFRAME, 0, 2000)
    df = pd.DataFrame(bars)
    df['time'] = pd.to_datetime(df['time'], unit='s')
    
    # Calculate SMC features
    df = calculate_smc_features(df)
    
    # Create sequences for LSTM
    features = df[['open', 'high', 'low', 'close', 'volume',
                  'breaker_bullish', 'breaker_bearish',
                  'order_block_bull', 'order_block_bear',
                  'imbalance_bull', 'imbalance_bear']]
    
    # Normalize data
    scaler = MinMaxScaler()
    scaled_data = scaler.fit_transform(features)
    
    # Create sequences
    X, y = [], []
    for i in range(lookback, len(scaled_data)):
        X.append(scaled_data[i-lookback:i])
        y.append(1 if df['close'].iloc[i] > df['open'].iloc[i] else 0)
    
    return np.array(X), np.array(y), scaler

# =============================================
# Trading Engine
# =============================================
class SmartTrader:
    def __init__(self):
        self.models = {}
        self.scalers = {}
        self.initialize_models()
        
    def initialize_models(self):
        for symbol in SYMBOLS:
            X, y, scaler = prepare_data(symbol)
            if len(X) == 0:
                continue
                
            # Train/test split
            split = int(0.8 * len(X))
            X_train, X_test = X[:split], X[split:]
            y_train, y_test = y[:split], y[split:]
            
            # Create and train model
            model = create_lstm_model((X_train.shape[1], X_train.shape[2]))
            model.fit(X_train, y_train, epochs=50, batch_size=32, validation_data=(X_test, y_test))
            
            self.models[symbol] = model
            self.scalers[symbol] = scaler
            
    def get_live_data(self, symbol, lookback=60):
        bars = mt5.copy_rates_from_pos(symbol, TIMEFRAME, 0, lookback)
        df = pd.DataFrame(bars)
        df = calculate_smc_features(df)
        features = df[['open', 'high', 'low', 'close', 'volume',
                      'breaker_bullish', 'breaker_bearish',
                      'order_block_bull', 'order_block_bear',
                      'imbalance_bull', 'imbalance_bear']]
        scaled_data = self.scalers[symbol].transform(features)
        return np.array([scaled_data[-lookback:]])
    
    def execute_trade(self, symbol, prediction):
        price_info = mt5.symbol_info_tick(symbol)
        atr = np.mean(mt5.symbol_info(symbol).point * 10000)
        rr = np.random.choice(RISK_REWARD_RATIOS)
        
        trade_request = {
            "action": mt5.TRADE_ACTION_DEAL,
            "symbol": symbol,
            "volume": LOT_SIZE,
            "type": mt5.ORDER_TYPE_BUY if prediction else mt5.ORDER_TYPE_SELL,
            "price": price_info.ask if prediction else price_info.bid,
            "sl": price_info.ask - atr if prediction else price_info.bid + atr,
            "tp": price_info.ask + (atr * rr) if prediction else price_info.bid - (atr * rr),
            "deviation": 20,
            "magic": 2024,
            "comment": "SMC-LSTM Trade",
            "type_time": mt5.ORDER_TIME_GTC,
        }
        
        result = mt5.order_send(trade_request)
        return result

    def run(self):
        while True:
            for symbol in SYMBOLS:
                if symbol not in self.models:
                    continue
                    
                live_data = self.get_live_data(symbol)
                prediction = self.models[symbol].predict(live_data)[0][0]
                
                if prediction > 0.65:  # Bullish signal
                    self.execute_trade(symbol, True)
                elif prediction < 0.35:  # Bearish signal
                    self.execute_trade(symbol, False)
            
            time.sleep(60 * 60)  # Check hourly

# =============================================
# Main Execution
# =============================================
if __name__ == "__main__":
    trader = SmartTrader()
    trader.run()
    mt5.shutdown()
